MINI TALK

Programa de comunicacion entre un cliente y un server, el que van a intercambiar datos usando UNIX.

Para el envio de datos se hara dos señales; SIGUSR1 y SIGUSR2, que se encargarán de codificar y decodificar el mensaje.
La comunicacion entre servidor y cliente se hará mediante un PID.
PID = Un dato identificativo de los procesos que un programa hace.
Solo se puede usar una variable global por programa

Son 2 programas. El cliente envía un mensaje y el otro se queda a la espera de recibirlo. El problema es que no sabe cuanto va a esperar, cuando va a recibri el mensaje.
El server estará tranquilo, sin hacer nada, sin consumir energia,recursos, porque cuando llegue algo le van a despertar con una señal.
PLANTEAMIENTO 

Nuestra aplicación consta de dos procesos, uno que espera leer cada carácter (el servidor) y el otro que enviará el carácter al servidor (el cliente). 
La cuestión clave es que el segundo proceso deberá señalar de alguna manera al primero cada nuevo personaje encontrado.

Un proceso puede enviar una señal con la llamada kill o risesystem.

Para establecer una comunicación entre un cliente y un servidor utilizando señales en UNIX, puedes seguir estos pasos:

PASOS

* Paso 1: Definir la estructura de los mensajes
  Define una estructura que contenga los datos a intercambiar entre el cliente y el servidor. Por ejemplo:


        typedef struct {
            int pid;
            char message[MAX_MESSAGE_SIZE];
        } Message;
        
* Paso 2: Implementar el servidor
    El servidor debe esperar señales del cliente y decodificarlas para obtener los mensajes.
    Utiliza la función sigaction para establecer un manejador de señales para SIGUSR1 y SIGUSR2.
    Cuando reciba una señal, decodifica el mensaje y realiza la acción correspondiente.
    Ejemplo de manejo de señales en el servidor:

    void sigusr_handler(int signal) {
    // Decodificar el mensaje y realizar la acción correspondiente
    }

    int main() {
        // Configurar sigaction para manejar señales SIGUSR1 y SIGUSR2
        struct sigaction sigusr_action;
        sigemptyset(&sigusr_action.sa_mask);
        sigusr_action.sa_flags = 0;
        sigusr_action.sa_handler = sigusr_handler;
        sigaction(SIGUSR1, &sigusr_action, NULL);
        sigaction(SIGUSR2, &sigusr_action, NULL);

        // Esperar señales
     while (1) {
            pause();
    }

    return 0;
}
* Paso 3: Implementar el cliente
    El cliente debe enviar señales al servidor con los mensajes codificados.
    Utiliza la función kill para enviar señales al servidor.
    Ejemplo de envío de señales desde el cliente:

    void send_message(int pid, char* message) {
        // Codificar el mensaje y enviar la señal correspondiente al servidor
        // Usar kill con señales SIGUSR1 y SIGUSR2
    }

    int main() {
        int server_pid = /* obtener PID del servidor */;
        char message[MAX_MESSAGE_SIZE] = "Hola, servidor!";
    
        // Enviar mensaje al servidor
        send_message(server_pid, message);

        return 0;
    }
* Paso 4: Compilar y ejecutar
    Crea un archivo Makefile para compilar los ejecutables client y server.
    Asegúrate de manejar cuidadosamente los errores y de liberar la memoria correctamente.
    No olvides gestionar el envío de PID entre el cliente y el servidor para establecer la comunicación.
